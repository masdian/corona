summarize(tot = n())
data <- data %>%
pivot_wider(names_from = jk, values_from = tot)
data[is.na(data)] <- 0
names(data) <- c("Pendidikan", "Laki-Laki", "Perempuan")
data$Pendidikan <- c("Tidak Ada Data", "Tidak Sekolah", "Tidak Tamat SD", "SD", "SLTP", "SLTA", "D1", "D2", "D3", "D4", "S1", "S2", "S3")
data <- adorn_totals(data, where = c("col", "row"), name = "JML")
kable(data) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 1, "Jenis Kelamin" = 2, " " = 1))
warnings()
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data
data <- data %>%
group_by(fakultas) %>%
summarize(lulus = sum(lulus),
sudah = sum(sudah),
belum = sum(belum),
diterima = sum(diterima))
data
data$fakultas <- c("Hukum", "FKIP", "Teknik", "Pertanian",
"FEB", "FISIP", "Pascasarjana","Kedokteran")
data$fakultas  <- factor(data$fakultas, levels = data[["fakultas"]])
plot_ly(data, x = ~fakultas, y = ~lulus, type = "bar", name = "Total") %>%
add_trace(y = ~sudah, name = "registrasi berkas") %>%
add_trace(y = ~diterima, name = "bayar UKT") %>%
layout(
title = "",
yaxis = list(title = ""),
xaxis = list(title = "Fakultas"),
hovermode = "compare"
)
data <- adorn_totals(data, where = "row", name = "Total")
data$pers_sudah <- round(data$sudah / data$lulus * 100, 0)
data$pers_belum <- round(data$belum / data$lulus * 100, 0)
data <- data[,c(1:4,6:7,5)]
names(data) <- c("Fakultas", "Lolos Seleksi", "Ya", "Tidak", "Ya (%)", "Tidak (%)", "Bayar UKT")
kable(data) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 2, "Registrasi Berkas" = 4," " = 1))
data <- db %>%
group_by(fakultas, prodi) %>%
summarize(lulus = n(),
sudah = sum(na.omit(registrasi == "registrasi")),
belum = lulus - sudah,
diterima = sum(na.omit(nim == "diterima")))
data <- data[, -1]
data <- adorn_totals(data,where = "row", name = "Total")
data$pers_sudah <- round(data$sudah / data$lulus * 100, 0)
data$pers_belum <- round(data$belum / data$lulus * 100, 0)
data <- data[,c(1:4,6, 7, 5)]
names(data) <- c("Fakultas/Program Studi", "Lolos Seleksi", "Ya", "Tidak", "Ya (%)", "Tidak (%)", "Bayar UKT")
View(data)
kable(data, row.names = F) %>%
kable_styling(bootstrap_options = "striped", full_width = F,
latex_options = "scale_down") %>%
add_header_above(c(" " = 2, "Registrasi" = 4, " " = 1)) %>%
pack_rows("Hukum", 1, 1, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Keguruan dan Ilmu Pendidikan", 2, 19, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Teknik", 20, 25, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pertanian", 26, 29, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ekonomi dan Bisnis", 30, 37, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Ilmu Sosial dan Ilmu Politik", 38, 40, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Pascasarjana", 41, 52, label_row_css = "background-color: #666; color: #fff;") %>%
pack_rows("Kedokteran", 53, 57, label_row_css = "background-color: #666; color: #fff;")
db <- read_excel("G:/My Drive/#PMB/2020/Dashboard/maba20_4web.xlsx")
data <- db %>%
group_by(jalur) %>%
summarize(lolos = n(),
regis = sum(registrasi == "registrasi", na.rm = T),
nim = sum(nim == "diterima", na.rm = T))
data
library(googlesheets4)
gs4_deauth()
## 01 Keringanan
data <- NULL
keringanan <- "https://docs.google.com/spreadsheets/d/1LGW6-zgG8rZoDog5KEXwqoE3IFK2aD2O_MW_gJ2JdCQ/edit?usp=sharing"
keringanan
data1 <- data.frame(read_sheet(keringanan))
data1
names(data1)
data1[,c(2, 4)]
names(data1)
dim(data1)
unique(data1$Email.address)
sum(unique(data1$Email.address))
length(unique(data1$Email.address))
dim(data1)
names(data1)
data1 <- data1[,c(1,2,4,5)]
names(data1)
names(data1) <- c("timestamp", "email", "nama", "no_ktp")
data1 <- unique(data1)
data <- rbind(data, data1)
sbm_kip <- "https://docs.google.com/spreadsheets/d/1BQkSjjr5MqXxkzTEM6Rbpwn0wYLX177xeYdzrMepeD0/edit?usp=sharing"
data1 <- data.frame(read_sheet(sbm_kip))
data1 <- data1[,c(1,2,4,5)]
names(data1) <- c("timestamp", "email", "nama", "no_ktp")
data1 <- unique(data1)
data <- rbind(data, data1)
dim(data)
smm <- "https://docs.google.com/spreadsheets/d/1xF0vL_xCOOyK8zrUWQUQcQy_jncBUiZPLfaa8aYKOAU/edit?usp=sharing"
data1 <- data.frame(read_sheet(smm))
data1 <- data1[,c(1,2,4,5)]
names(data1) <- c("timestamp", "email", "nama", "no_ktp")
data1 <- unique(data1)
data <- rbind(data, data1)
dim(data)
## 04 umm
umm <- 'https://docs.google.com/spreadsheets/d/1PetxRxMiQJ1NI4P_OxJDxCu_ZmXs_1MN6Y-0bQhMKpU/edit?usp=sharing'
data1 <- data.frame(read_sheet(umm))
data1 <- data1[,c(1,2,4,5)]
names(data1) <- c("timestamp", "email", "nama", "no_ktp")
data1 <- unique(data1)
data <- rbind(data, data1)
head(data)
dim(data)
names(data)
data <- NULL
sbm_reg <- "https://docs.google.com/spreadsheets/d/1LGW6-zgG8rZoDog5KEXwqoE3IFK2aD2O_MW_gJ2JdCQ/edit?usp=sharing"
data1 <- data.frame(read_sheet(sbm_reg))
data1 <- data1[,c(1,2,4,5)]
names(data1) <- c("waktu_daftar", "email", "nama", "no_ktp")
data1 <- unique(data1)
data <- rbind(data, data1)
## 02 sbmptn kip
sbm_kip <- "https://docs.google.com/spreadsheets/d/1BQkSjjr5MqXxkzTEM6Rbpwn0wYLX177xeYdzrMepeD0/edit?usp=sharing"
data1 <- data.frame(read_sheet(sbm_kip))
data1 <- data1[,c(1,2,4,5)]
names(data1) <- c("waktu_daftar", "email", "nama", "no_ktp")
data1 <- unique(data1)
data <- rbind(data, data1)
## 03 smmptn
smm <- "https://docs.google.com/spreadsheets/d/1xF0vL_xCOOyK8zrUWQUQcQy_jncBUiZPLfaa8aYKOAU/edit?usp=sharing"
data1 <- data.frame(read_sheet(smm))
data1 <- data1[,c(1,2,4,5)]
names(data1) <- c("waktu_daftar", "email", "nama", "no_ktp")
data1 <- unique(data1)
data <- rbind(data, data1)
## 04 umm
umm <- 'https://docs.google.com/spreadsheets/d/1PetxRxMiQJ1NI4P_OxJDxCu_ZmXs_1MN6Y-0bQhMKpU/edit?usp=sharing'
data1 <- data.frame(read_sheet(umm))
data1 <- data1[,c(1,2,4,5)]
names(data1) <- c("waktu_daftar", "email", "nama", "no_ktp")
data1 <- unique(data1)
data <- rbind(data, data1)
head(data)
names(data) <- c("Waktu Pendaftaran", "Email", "Nama", "Program Studi")
DT::datatable(data,
rownames = F)#,
names(data) <- c("Waktu Pendaftaran", "Email", "Nama", "No KTP")
DT::datatable(data,
rownames = F)#,
data <- data[,c(1, 2)]
names(data) <- c("Waktu Pendaftaran", "Email")
DT::datatable(data,
rownames = F)#,
library(tidyverse)
library(magick)
install.packages('magick')
library(magick)
library(grid)
img <- image_read("https://pbs.twimg.com/media/EXQlsS6WAAAXy3W?format=jpg&name=medium")
d <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us.csv")
img
d
tail(d)
dat <- d %>%
bind_rows(tibble(date = Sys.Date() + 1:91)) %>%
filter(date >= "2020-02-26") %>%
mutate(death = c(deaths[1], diff(deaths)))
dat
p <- predict(lm(log(death + 0.5) ~ poly(date, 3), data = dat), newdata = dat)
p1 <- ggplot(dat, aes(x = date, y = death)) +
geom_line() +
annotation_custom(
rasterGrob(img, width = unit(1, "npc"),  height = unit(1, "npc")),
-Inf, Inf, -Inf, Inf) +
ylim(c(-500, 5000)) +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
scale_x_date(limits = as.Date(c('2020-02-17','2020-08-10')))
p1
p1
p2 <- ggplot(dat, aes(x = date, y = death)) +
geom_line() +
annotation_custom(
rasterGrob(img, width = unit(1, "npc"),  height = unit(1, "npc")),
-Inf, Inf, -Inf, Inf) +
geom_line() +
ylim(c(-500, 5000)) +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
scale_x_date(limits = as.Date(c('2020-02-17','2020-08-10')))
p2
p3 <- ggplot(dat, aes(x = date, y = death)) +
annotation_custom(
rasterGrob(img, width = unit(1, "npc"),  height = unit(1, "npc")),
-Inf, Inf, -Inf, Inf) +
geom_line() +
geom_line(aes(x = date, y = exp(p))) +
ylim(c(-500, 5000)) +
theme(axis.title = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank()) +
scale_x_date(limits = as.Date(c('2020-02-17','2020-08-10')))
p3
fig1 <- image_graph(width = 1000, height = 650, res = 300)
p1
dev.off()
fig2 <- image_graph(width = 1000, height = 650, res = 300)
p2
dev.off()
fig2 <- fig2 %>%
image_annotate("I've added death data from NYTimes - @LucyStats",
location = "+650+400", size = 15)
fig3 <- image_graph(width = 1000, height = 650, res = 300)
p3
dev.off()
fig3 <- fig3 %>%
image_annotate("I've added death data from NYTimes - @LucyStats",
location = "+650+400", size = 15) %>%
image_annotate("I've added a model with 3rd degree polynomial\n for log(death + 0.5) - @LucyStats",
location = "+650+420", size = 15)
image_join(fig1, fig2, fig3) %>%
image_animate(fps = 1)
setwd("G:/My Drive/Dian/BRI HACKATON/People Analytic")
dir()
# data train dan test
train <- read.csv("train.csv")
test <- read.csv("test.csv")
dim(train)
str(train)
summary(train)
names(train)
unique(train$achievement_target_1)
table(train$achievement_target_1)
6727/nrow(train)
summary(train)
str(train)
str(test)
library(tidyverse)
train <- mutate_if(train, is.character, as.factor)
str(train)
test <- mutate_if(test, is.character, as.factor)
str(test)
str(train)
summary(train)
unique(train$achievement_target_1)
# jika ada data kosong, ubah dulu menjadi NA
train <- train %>% mutate_all(na_if,"")
summary(train)
4275+18+10985+6727
table(train$Employee_type)
unique(train$Employee_type)
unique(train$achievement_target_1)
# Pencapaian 50%-100% -> achiev_50%-100%
# Pencapaian
table(train$achievement_target_1)
unique(train$achievement_target_1)
unique(test$achievement_target_1)
train1 <- train %>%
mutate(achievement_target_1 == "Pencapaian 50%-100%", "achiev_50%-100%")
unique(train1$achievement_target_1)
train1 <- train %>%
mutate(achievement_target_1 = ifelse(achievement_target_1 == "Pencapaian 50%-100%", "achiev_50%-100%"))
train1 <- train %>%
mutate(achievement_target_1 = ifelse(achievement_target_1 == "Pencapaian 50%-100%", "achiev_50%-100%", achievement_target_1))
table(train1$achievement_target_1)
unique(train1$achievement_target_1)
train1 <- train
train1[train1 == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
unique(train1$achievement_target_1)
train1[train1 == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
unique(train1$achievement_target_1)
train1[train1 == "Tidak diberikan target"] <- "achiev_< 50%"
unique(train1$achievement_target_1)
train1[train1 == "Tidak diberikan target"] <- "achiev_< 50%"
train1[train1 == "Pencapaian < 50%"] <- "achiev_< 50%"
unique(train1$achievement_target_1)
train1[train1 == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
unique(train1$achievement_target_1)
train1 <- train
train1[train1 == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
train1[train1 == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
train1[train1 == "Tidak diberikan target"] <- "achiev_< 50%"
train1[train1 == "Pencapaian < 50%"] <- "achiev_< 50%"
train1[train1 == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
train1 <- train
train1[train1 == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
table(train1$achievement_target_1)
train1 <- train
train1[train1 == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
train1[train1 == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
train1[train1 == "Tidak diberikan target"] <- "achiev_< 50%"
train1[train1 == "Pencapaian < 50%"] <- "achiev_< 50%"
train1[train1 == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
table(train1$achievement_target_1)
# data train dan test
train <- read.csv("train.csv")
train1 <- train
train1[train1 == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
train1[train1 == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
train1[train1 == "Tidak diberikan target"] <- "achiev_< 50%"
train1[train1 == "Pencapaian < 50%"] <- "achiev_< 50%"
train1[train1 == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
train <- train1
train <- mutate_if(train, is.character, as.factor)
# jika ada data kosong, ubah dulu menjadi NA
train <- train %>% mutate_all(na_if,"")
summary(train)
unique(train$Education_level)
unique(train$year_graduated)
# data train dan test
train <- read.csv("train.csv")
test <- read.csv("test.csv")
train[train == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
train[train == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
train[train == "Tidak diberikan target"] <- "achiev_< 50%"
train[train == "Pencapaian < 50%"] <- "achiev_< 50%"
train[train == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
test[test == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
test[test == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
test[test == "Tidak diberikan target"] <- "achiev_< 50%"
test[test == "Pencapaian < 50%"] <- "achiev_< 50%"
test[test == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
train <- mutate_if(train, is.character, as.factor)
test <- mutate_if(test, is.character, as.factor)
# jika ada data kosong, ubah dulu menjadi NA
train <- train %>% mutate_all(na_if,"")
summary(train)
# data train dan test
train <- read.csv("train.csv")
test <- read.csv("test.csv")
train[train == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
train[train == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
train[train == "Tidak diberikan target"] <- "achiev_< 50%"
train[train == "Pencapaian < 50%"] <- "achiev_< 50%"
train[train == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
train[train == "not reached"] <- "not_reached"
test[test == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
test[test == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
test[test == "Tidak diberikan target"] <- "achiev_< 50%"
test[test == "Pencapaian < 50%"] <- "achiev_< 50%"
test[test == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
test[test == "not reached"] <- "not_reached"
train <- mutate_if(train, is.character, as.factor)
test <- mutate_if(test, is.character, as.factor)
# jika ada data kosong, ubah dulu menjadi NA
train <- train %>% mutate_all(na_if,"")
summary(train)
table(train$Employee_type)
train1 <- droplevels(train)
summary(train1)
# data train dan test
train <- read.csv("train.csv")
test <- read.csv("test.csv")
train[train == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
train[train == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
train[train == "Tidak diberikan target"] <- "achiev_< 50%"
train[train == "Pencapaian < 50%"] <- "achiev_< 50%"
train[train == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
train[train == "not reached"] <- "not_reached"
test[test == "Pencapaian 50%-100%"] <- "achiev_50%-100%"
test[test == "Pencapaian 100%-150%"] <- "achiev_100%-150%"
test[test == "Tidak diberikan target"] <- "achiev_< 50%"
test[test == "Pencapaian < 50%"] <- "achiev_< 50%"
test[test == "Pencapaian > 1.5"] <- "achiev_> 1.5%"
test[test == "not reached"] <- "not_reached"
train <- mutate_if(train, is.character, as.factor)
test <- mutate_if(test, is.character, as.factor)
# jika ada data kosong, ubah dulu menjadi NA
train <- train %>% mutate_all(na_if,"")
# level faktor disesuaikan
train <- droplevels(train)
test <- droplevels(test)
summary(train)
test <- test[, -c("year_graduated")]
names(test)
names(test)
test <- test[, -c("year_graduated")]
test <- test[, -c("year_graduated")]
names(train)
train <- train[, -16]
names(train)
names(test)
test <- test[, -16]
names(test)
# Checking for missing values available in train data
a <- colSums(is.na(train))/nrow(train)*100
class(a)
b <- seq(1,length(a))
c <- data.frame(var = b, persen_NA = a)
c[c$persen_NA > 25,]
c
c
# menghilangkan semua baris yang ada NA nya
train1 <- train[complete.cases(train), ]
dim(train1)
table(train1$Best.Performance)
library(caret)
boxplot(train)
boxplot(train)
boxplot(train$achievement_target_1)
x <- findCorrelation(cor(train1),
cutoff = 0.7,
verbose = TRUE,
names = TRUE,
exact = ncol(train1) < 100
)
str(train1)
train1 <- train1 %>%
relocate(Best.Performance, .after = last_col())
names(train1)
names(test)
class(train1)
str(train1)
plot(Best.Performance ~ sick_leaves, data = train1)
plot(Best.Performance ~ sick_leaves, data = train1)
barplot(Best.Performance ~ sick_leaves, data = train1)
plot(Best.Performance ~ sick_leaves, data = train1)
names(train)
plot(achievement_target_1 ~ Best.Performance, data = train1)
str(train1)
train1$Best.Performance <- as.factor(train1$Best.Performance)
str(train1)
train1 <- train1 %>%
mutate_if(is.numeric, scale)
summary(train1)
names(train1)
str(train1)
class(train1)
# Step 1: Get row numbers for the training data
trainRowNumbers <- createDataPartition(train1$Best.Performance, p=0.8, list=FALSE)
# Step 2: Create the training  dataset
trainData <- train1[trainRowNumbers,]
# Step 3: Create the test dataset
testData <- train1[-trainRowNumbers,]
prop.table(table(trainData$Default))
prop.table(table(trainData$Best.Performance))
# Performing Random Forest
Control <- trainControl(method = "cv",number = 5)
rf <- train(Class~., trainData, trCtrl = Control, method = "rf",tuneLength=10)
rf <- train(Best.Performance~., trainData, trCtrl = Control, method = "rf",tuneLength=10)
rf <- train(Best.Performance ~ ., trainData, trCtrl = Control, method = "rf", tuneLength=1)
rf
varImp(rf)
rf1 <- train(Best.Performance ~ Avg_achievement_., trainData, trCtrl = Control, method = "rf", tuneLength=1)
rf1
rf$bestTune
# Predicting Model on Train Data for Random Forest
pred.train.rf <- predict(rf, trainData, type = "raw")
summary(pred.train.rf)
confusionMatrix(trainData$Best.Performance, pred.train.rf)
pred.test.rf <- predict(rf, testData, type = "raw")
summary(pred.test.rf)
confusionMatrix(testData$Best.Performance, pred.test.rf)
library(pROC)
roc_obj <- roc(testData$Best.Performance, pred.test.rf)
pred.test.rf
roc_obj <- roc(as.numeric(testData$Best.Performance), pred.test.rf)
category <- c(1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0)
prediction <- rev(seq_along(category))
prediction
prediction[9:10] <- mean(prediction[9:10])
prediction
# Create a ROC curve:
data(aSAH)
class(aSAH)
aSAH$outcome
aSAH$s100b
library(MLeval)
install.packages('MLeval')
library(MLeval)
res <- evalm(rf)
rf$pred
res <- evalm(rf1)
rf1$method
rf1
rf
data(Sonar)
ctrl <- trainControl(method="cv",
summaryFunction=twoClassSummary,
classProbs=T)
rfFit <- train(Class ~ ., data=Sonar,
method="rf", preProc=c("center", "scale"),
trControl=ctrl)
rfFit
# Performing Random Forest
Control <- trainControl(method = "cv",
summaryFunction=twoClassSummary,
classProbs=T,
number = 5)
rf <- train(Best.Performance ~ ., trainData, trCtrl = Control, method = "rf", tuneLength=1)
rf
rf$pred
rf$call
data(Sonar)
sonar
Sonar
rfFit
str(Sonar)
setwd("~/Github Publish/Corona/masdian.github.io")
